#!/usr/bin/env bash


# sets $branch, $tag, $rest
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -b|--branch) branch="$2" ;;
            -t|--tag) tag="$2" ;;
            *) break ;;
        esac
        shift 2
    done
    rest=("$@")
}

# reads $branch, $tag, $commit_message
should_skip() {
    if [[ "$branch" && "$CIRCLE_BRANCH" != "$branch" ]]; then
        echo "Not on branch $branch. Skipping..."
        return 0
    fi

    if [[ "$tag" && "$commit_message" != *\[$tag\]* ]]; then
        echo "No [$tag] commit tag found. Skipping..."
        return 0
    fi

    return 1
}

# reads $branch, $tag
# sets $jq_prog
make_jq_prog() {
    local jq_filters=""

    if [[ $branch ]]; then
        jq_filters+=" and .branch == \"$branch\""
    fi

    if [[ $tag ]]; then
        jq_filters+=" and (.subject | contains(\"[$tag]\"))"
    fi

    jq_prog=".[] | select(.build_num < $CIRCLE_BUILD_NUM and (.status | test(\"running|pending|queued\")) $jq_filters) | .build_num"
}

curl_builds() {
  curl -s -H "Accept: application/json" "$api_url"
}


if [[ "$0" != *bats* ]]; then
set -e
set -u
set -o pipefail

    ## when circleci build is run via CLI, CIRCLE_BUILD_NUM is set but empty.
    ## check this first
    if [[ "x${CIRCLE_BUILD_NUM}" == "x" ]]
     then
      echo "Skipping $(basename $0), this appears to be a CLI build, CIRCLE_BUILD_NUM is empty"
      exit 0
    fi

    ## lets do some validation checks.
    ##
    min_jqversion="jq-1.5"
    jqversion=$(jq --version)
    ## simple test, probably should be better.  this just compares after the last .
    if [[ ${jqversion/*./} -lt ${min_jqversion/*./} ]]
     then
      echo "ERROR: requires jq version [ ${min_jqversion} ] or newer, you have [ ${jqversion} ]"
      exit 1
    fi

    if [[ "x${CIRCLE_TOKEN:=}" == "x" ]]
     then
      echo "ERROR: CIRCLE_TOKEN is unset or empty"
      exit 1
    fi

    branch=""
    tag=""
    rest=()
    api_url="https://circleci.com/api/v1/project/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?circle-token=$CIRCLE_TOKEN&limit=100"

    parse_args "$@"
    commit_message=$(git log -1 --pretty=%B)
    if should_skip; then exit 0; fi
    make_jq_prog

    echo "Checking for running builds..."

    # we need to test for validity of the token somewhere.
    # cheese:~%% curl -s -H 'Accept: application/json' 'https://circleci.com/api/v1/project/.../...?circle-token=...&limit=100'
    # {"message":"Permission denied"}
    if curl_builds | grep -q "Permission denied"
     then
      echo "ERROR: attempting to use your CIRCLE_TOKEN results in permission denied error"
      exit 1
    fi

    while true; do
        builds=$(curl_builds | jq "$jq_prog")
        if [[ $builds ]]; then
            echo "Waiting on builds:"
            echo "$builds"
        else
            break
        fi
        echo "Retrying in 5 seconds..."
        sleep 5
    done

    echo "Acquired lock"

    if [[ "${#rest[@]}" -ne 0 ]]; then
        "${rest[@]}"
    fi
fi
